{
    "contents" : "gc()\nstarttime <- Sys.time()\nSys.setenv(http_proxy=\"http://niyong:111111yN@isa06:8008/\")\n\n###########################################\nstocklist <- read.table(\"stocklist.txt\", colClasses=c(\"character\"), col.names=c(\"code\"))\n\ncheckmarket <- function(stock) {\n  ifelse(substr(stock, 1, 1)==6, \"sh\", \"sz\")\n}\nstocklist$market <- apply(stocklist, 2, checkmarket)\nstocklist$market <- paste(stocklist$code, stocklist$market, sep=\".\")\n\n\ngetstock <- function(stocklist, i) {  \n  library(RCurl)\n  library(XML)  \n  d <- debugGatherer()\n  html.url <- paste(\"http://stockdata.stock.hexun.com/zlkp/s\", stocklist[i, \"code\"], \".shtml\", sep=\"\")\n  html.page <- htmlTreeParse(getURL(html.url, .opts = list(debugfunction=d$update,verbose = TRUE)), useInternalNode=T)\n  html.content.1 <- getNodeSet(doc=html.page, path = \"//div[@class='s_box']//p[@class='text_01']\")\n  content <- getChildrenStrings(html.content.1[[1]])\n  text <- enc2utf8(content[2])\n  textint <- utf8ToInt(text)\n  text <- intToUtf8(textint[which(textint<60 & textint>45 | textint==38170 | textint==21348)])\n  #yyyy\n  start <- regexpr(\"20\" , text)\n  end <- unlist(gregexpr(intToUtf8(38170) , text))\n  stocklist[i, \"main.cost.year\"] <- as.numeric(substr(text, start, end-1))\n  #month day\n  start <- regexpr(intToUtf8(38170) , text)\n  end <- start+4\n  stocklist[i, \"main.cost.month.day\"] <- as.numeric(substr(text, start+1, end))\n  # main cost\n  start <- regexpr(intToUtf8(21348) , text)\n  end <- nchar(text)\n  stocklist[i, \"main.cost.value\"]<- as.numeric(substr(text, start+1, end))\n  ######################\n  real.stock.url <- paste(\"http://bdcjhq.hexun.com/quote?s2=\", stocklist[i, \"market\"], sep=\"\")  \n  real.stock.page <- htmlTreeParse(getURL(real.stock.url, .opts = list(debugfunction=d$update, verbose = TRUE)), useInternalNode=T, encoding=\"GBK\")\n  real.stock.content <- getNodeSet(doc=real.stock.page, path = \"//script\")\n  content <- getChildrenStrings(real.stock.content[[2]])\n  text <- enc2utf8(content)\n  start <- regexpr(\"pc\", text)\n  if (start != -1) {\n    end <-  regexpr(\"time\", text)\n    text <- substring(text, start, end-2)\n    text <- gsub(\"\\\"\", \"\", text)\n    text <- gsub(\"na\", \"name\", text)\n    text <- gsub(\"pc\", \"yesterday\", text)\n    text <- gsub(\"op\", \"open\", text)\n    text <- gsub(\"vo\", \"volumn\", text)\n    text <- gsub(\"tu\", \"turn.volumn\", text)\n    text <- gsub(\"hi\", \"high\", text)\n    text <- gsub(\"lo\", \"low\", text)\n    text <- gsub(\"la\", \"lastest.value\", text)\n    text <- gsub(\"type\", \"type\", text)\n    text <- gsub(\"time\", \"time\", text)\n    text <- gsub(\"sy\", \"pe\", text)\n    text <- gsub(\"lt\", \"circulating.shares\", text)\n    text <- gsub(\"sz\", \"market.value\", text)\n    text <- gsub(\"hs\", \"turnover.rate\", text)\n    splitedtext <- strsplit(text, \",\")\n    ltext <- lapply(splitedtext, \"strsplit\", \":\")\n    stocklist[i, \"yesterday\"]<- ltext[[1]][[1]][2]\n    stocklist[i, \"open\"] <- ltext[[1]][[2]][2]\n    stocklist[i, \"volumn\"] <- ltext[[1]][[3]][2]\n    stocklist[i,\"turn.volumn\"] <- ltext[[1]][[4]][2]\n    stocklist[i, \"high\"] <- ltext[[1]][[5]][2]\n    stocklist[i, \"low\"] <- ltext[[1]][[6]][2]\n    stocklist[i, \"lastest.value\"] <- ltext[[1]][[7]][2]\n    stocklist[i, \"type\"] <- ltext[[1]][[8]][2]\n    print(stocklist[i,])\n  } else {\n    gc()\n  }\n}\n\n\n###########################################\nlibrary(foreach)\nlibrary(doParallel)\nn <- nrow(stocklist)\n\ncl <- makeCluster(50)\nregisterDoParallel(cl)\nresult <- foreach(j=1:n, .combine=\"rbind\", .errorhandling=\"remove\") %dopar% getstock(stocklist, j)\nstopCluster(cl)\nfilename <- paste(\"stocklist_\", Sys.Date(), \".csv\", sep=\"\")\nwrite.csv(result, filename)\nprint(Sys.time()-starttime)",
    "created" : 1426223980252.000,
    "dirty" : false,
    "encoding" : "GB2312",
    "folds" : "",
    "hash" : "1103823436",
    "id" : "6464575C",
    "lastKnownWriteTime" : 1426226371,
    "path" : "D:/niyong/tools/R/projects/stock/stockParallel.R",
    "project_path" : "stockParallel.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}