l<-gregexpr("data(\\d*):(\\D*)", html.page.json)
attr(l, 'match.length')
attr(l, "match.length")
attr(l, "@match.length")
attr(l, "$match.length")
attr(l, ".match.length")
attr(regexpr("^\\s+",l),"match.length")
attr(l, "match.length")
unclass(l)
unlist(l)
unclass(l)
attr(,"match.length")
attr(l, "match.length")
attr(l, ",match.length")
attr(l, "attr(,\"match.length\")")
attr(l[[1]], ",match.length")
attr(l[[1]], "match.length")
attr(l[[2]], "match.length")
attr(l[[1]], "match.length")
lapply(l, substr, start=attr(l[[1]], "match.length"), stop=4)
lapply(l, substr, start=attr(, "match.length"), stop=4)
lapply(l, substr, start=attr("match.length"), stop=4)
lengths <- attr(l[[1]], "match.length")
lapply(l, substr, start=l[[1]], stop=lengths)
lapply(l, substr, start=l[[1]], stop=1)
slapply(l, substr, start=l[[1]], stop=1)
sapply(l, substr, start=l[[1]], stop=1)
sapply(html.page.json, substr, start=l[[1]], stop=1)
sapply(html.page.json, substr, start=l[[1]], stop=lengths)
l
replicate(length(l))
replicate(length(l), mean)
length(l)
length(l[[1]])
replicate(length(l)[[1]], mean)
l
sapply(l, "[")
lapply(l, "[")
sapply(l, "[")
class(sapply(l, "["))
sapply(l, "[")[1,]
sapply(l, "[")[2,]
l[[1]][1]
l[[1]][2]
substr(html.page.json, start=l[[1]][1], stop=attr(l[[1]][1], "match.length")
)
substr(html.page.json, start=l[[1]][1], stop=attr(l[[1]][1], "match.length")
)
attr(l[[1]][1], "match.length")
attr(l[[1]], "match.length")
attr(l[[1]], "match.length")[[1]]
attr(l[[1]], "match.length")[1]
attr(l[[1]], "match.length")[2]
substr(html.page.json, start=l[[1]][1], stop=attr(l[[1]], "match.length")[1])
html.page.json
class(html.page.json)
substr(html.page.json, start=l[[1]][1], stop=attr(l[[1]], "match.length")[1])
substr(html.page.json, start=l[[1]][1], stop=l[[1]][1]+attr(l[[1]], "match.length")[1])
substr(html.page.json, start=l[[1]][1], stop=l[[1]][1]+attr(l[[1]], "match.length")[1]+1)
substr(html.page.json, start=l[[1]][1], stop=l[[1]][1]+attr(l[[1]], "match.length")[1]+1)
l
substr(html.page.json, start=l[[1]][2], stop=l[[1]][2]+attr(l[[1]], "match.length")[1]+1)
substr(html.page.json, start=l[[1]][2], stop=l[[1]][2]+attr(l[[1]], "match.length")[1])
l<-gregexpr("data(\\d*):(\\D)", html.page.json)
l
l<-gregexpr("data(\\d*):(\\D*)", html.page.json)
l
substr(html.page.json, start=l[[1]][2], stop=l[[1]][2]+attr(l[[1]], "match.length")[2]+1)
substr(html.page.json, start=l[[1]][2], stop=l[[1]][2]+attr(l[[1]], "match.length")[2])
l<-gregexpr("data(\\d*):(\\D*),data", html.page.json)
l
l<-gregexpr("data(\\d*):(\\D*|\\w)", html.page.json)
l<-gregexpr("data(\\d*):(\\D*|\\w*)", html.page.json)
l
recommend
data.stock[data.stock$code=='000767',]
install.packages("RCurl")
install.packages("XML")
install.packages("rjson")
gc()
starttime <- Sys.time()
Sys.setenv(http_proxy="http://niyong:111111yN@isa06:8008/")
library(rjson)
library(RCurl)
library(XML)
gc()
starttime <- Sys.time()
Sys.setenv(http_proxy="http://niyong:111111yN@isa06:8008/")
library(rjson)
library(RCurl)
library(XML)
html.url <- "http://vol.stock.hexun.com/Data/Industry/RankDetail.ashx?period=1&&date=2015-03-19&groupby=0&addby=3&plate=1&count=1"
html.page <- getURL(html.url, .encoding="gb2312", .opts = list(debugfunction=d$update,verbose = TRUE))
html.page.json <- substr(html.page, start=2, stop=nchar(html.page)-1)
data.name.start <- gregexpr("data0:", html.page.json)
data.name.start <- gregexpr("StockNameLink:", html.page.json)
data.stock.volumn <- gregexpr("data9:", html.page.json)
data.stock.volumn
l<-gregexpr("data(\\d*):(\\D*),data", html.page.json)
l
l
html.page.json
html.url <- "http://vol.stock.hexun.com/Data/Industry/RankDetail.ashx?period=1&&date=2015-03-20&groupby=0&addby=3&plate=1&count=1"
html.page <- getURL(html.url, .encoding="gb2312", .opts = list(debugfunction=d$update,verbose = TRUE))
html.page.json <- substr(html.page, start=2, stop=nchar(html.page)-1)
l<-gregexpr("data(\\d*):(\\D*),data", html.page.json)
l
l<-gregexpr("data(\\d*):(\\D*)", html.page.json)
ll
l
l.1 <-  l[[1]]
l.1.match.length <- l[[1]]$match.length
l[[1]]$match.length
l[[1]]
l.1.match.length <- attr(l[[1]], "match.length")
l
l.1
l.1.match.length
l.match.length <- attr(l[[1]], "match.length")
l+l.match.length
lapply(l, "+ l.match.length)
)
""
"";
lapply(l, "+" l.match.length)
lapply(l, "+", l.match.length)
substr(html.page.json, start=l, stop=l.stop)
substr(html.page.json, start=l[[1]], stop=l.stop)
substr(html.page.json, start=l[[1]], stop=l.stop[[1]])
l.stop <- lapply(l, "+", l.match.length)
l.stop
l.stop[[1]]
substr(html.page.json, start=l[[1]], stop=l.stop[[1]])
(html.page.json
)
replicate(5, substr(html.page.json, start=l[[1]], stop=l.stop[[1]]))
for (i in 1:5) {
substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i])
}
for (i in 1:5) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):(\\D*)", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
l<-gregexpr("data(\\d*):(\\D*)", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:5) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
html.page.json
l<-gregexpr("data(\\d*):", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):(\\d*|\\w*)", html.page.json)
l
l<-gregexpr("data(\\d*):(\\d*|\\w*)", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):([\\d*]|[\\w*])", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):[\\d*]|\\w*]", html.page.json)
l
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):[\\d*]|\\w*]", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):[\\d*]|[\\w*]", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
l<-gregexpr("data(\\d*):([\\d*]|[\\w*])", html.page.json)
l.stop <- lapply(l, "+", attr(l[[1]], "match.length"))
for (i in 1:9) {
print(substr(html.page.json, start=l[[1]][i], stop=l.stop[[1]][i]))
}
data.stock[data.stock$code=='600195',]
data.stock[data.stock$code=='000739',]
data.stock[data.stock$code in c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161')]
data.stock[data.stock$code in c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161'),]
subset(data.stock, code in c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161')
)
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161'), main_cost_month_day = '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161')& main_cost_month_day = '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') , main_cost_month_day = '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') & main_cost_month_day == '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') , main_cost_month_day == '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') & main_cost_month_day == '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') & main_cost_month_day == '316')
subset(data.stock, code %in% c('600666','002007','000078','600572','600195','600062','000739','000597','600513','600201','600085','000513','600557','600161') & main_cost_month_day == '316', select=c(code, name, main_cost_value, lastest_value))
subset(data.stock, code %in% c('002603') & main_cost_month_day == '316', select=c(code, name, main_cost_value, lastest_value))
subset(data.stock, code %in% c('002603') & main_cost_month_day == '311', select=c(code, name, main_cost_value, lastest_value))
subset(data.stock, code %in% c('000999'), main_cost_month_day = '316')
recommend.exclude.3
recommend.exclude.3
gc()
starttime <- Sys.time()
Sys.setenv(http_proxy="http://niyong:111111yN@isa06:8008/")
###########################################
stocklist <- read.csv("stocklist.txt", header=T, colClasses=c("character","character"), col.names=c("code","name"))
stocklist <- stocklist[substr(stocklist$code,1,1)!=3,]
stocklist <- stocklist[order(stocklist$code),]
checkmarket <- function(stock) {
ifelse(substr(stock, 1, 1)==6, "sh", "sz")
}
stocklist$market <- apply(stocklist[,1,drop=F], 1, checkmarket)
stocklist$market <- paste(stocklist$code, stocklist$market, sep=".")
getstock <- function(stocklist, i) {
library(RCurl)
library(XML)
d <- debugGatherer()
html.url <- paste("http://stockdata.stock.hexun.com/zlkp/s", stocklist[i, "code"], ".shtml", sep="")
html.page <- htmlTreeParse(getURL(html.url, .opts = list(debugfunction=d$update,verbose = TRUE)), useInternalNode=T)
html.content.1 <- getNodeSet(doc=html.page, path = "//div[@class='s_box']//p[@class='text_01']")
content <- getChildrenStrings(html.content.1[[1]])
text <- enc2utf8(content[2])
textint <- utf8ToInt(text)
text <- intToUtf8(textint[which(textint<60 & textint>45 | textint==38170 | textint==21348)])
#yyyy
start <- regexpr("20" , text)
end <- unlist(gregexpr(intToUtf8(38170) , text))
stocklist[i, "main_cost_year"] <- as.numeric(substr(text, start, end-1))
#month day
start <- regexpr(intToUtf8(38170) , text)
end <- start+4
stocklist[i, "main_cost_month_day"] <- as.numeric(substr(text, start+1, end))
# main cost
start <- regexpr(intToUtf8(21348) , text)
end <- nchar(text)
stocklist[i, "main_cost_value"]<- as.numeric(substr(text, start+1, end))
######################
real.stock.url <- paste("http://bdcjhq.hexun.com/quote?s2=", stocklist[i, "market"], sep="")
real.stock.page <- htmlTreeParse(getURL(real.stock.url, .opts = list(debugfunction=d$update, verbose = TRUE)), useInternalNode=T, encoding="GBK")
real.stock.content <- getNodeSet(doc=real.stock.page, path = "//script")
content <- getChildrenStrings(real.stock.content[[2]])
text <- enc2utf8(content)
start <- regexpr("pc", text)
if (start != -1) {
end <-  regexpr("time", text)
text <- substring(text, start, end-2)
text <- gsub("\"", "", text)
text <- gsub("na", "name", text)
text <- gsub("pc", "yesterday", text)
text <- gsub("op", "open", text)
text <- gsub("vo", "volumn", text)
text <- gsub("tu", "turn_volumn", text)
text <- gsub("hi", "high", text)
text <- gsub("lo", "low", text)
text <- gsub("la", "lastest_value", text)
text <- gsub("type", "type", text)
text <- gsub("time", "time", text)
text <- gsub("sy", "pe", text)
text <- gsub("lt", "circulating_shares", text)
text <- gsub("sz", "market_value", text)
text <- gsub("hs", "turnover_rate", text)
splitedtext <- strsplit(text, ",")
ltext <- lapply(splitedtext, "strsplit", ":")
stocklist[i, "yesterday"]<- ltext[[1]][[1]][2]
stocklist[i, "open"] <- ltext[[1]][[2]][2]
stocklist[i, "volumn"] <- ltext[[1]][[3]][2]
stocklist[i,"turn_volumn"] <- ltext[[1]][[4]][2]
stocklist[i, "high"] <- ltext[[1]][[5]][2]
stocklist[i, "low"] <- ltext[[1]][[6]][2]
stocklist[i, "lastest_value"] <- ltext[[1]][[7]][2]
stocklist[i, "type"] <- ltext[[1]][[8]][2]
print(stocklist[i,])
} else {
gc()
}
}
################Parllel Running###########################
library(foreach)
library(doParallel)
n <- nrow(stocklist)
cl <- makeCluster(40)
registerDoParallel(cl)
result <- foreach(j=1:n, .combine="rbind", .errorhandling="remove") %dopar% getstock(stocklist, j)
stopCluster(cl)
filename <- paste("stocklist/stocklist_", Sys.Date(), ".csv", sep="")
write.csv(result, filename, row.names=F, quote=F)
print(Sys.time()-starttime)
######################今日主力成本分析#######################
criterion <- result$lastest_value>0 & (as.numeric(result$lastest_value) - as.numeric(result$main_cost_value))/as.numeric(result$main_cost_value) < 0.05
recommend <- result[criterion, c("code", "name", "main_cost_value","lastest_value")]
recommend[order(recommend$code),]
recommend.exclude.3x <- recommend[substr(recommend$code, 1,1)!=3,]
recommend.exclude.3x <- recommend.exclude.3x[order(recommend.exclude.3x$code),]
stock.concept.summary
stock.concept.summary <- data.frame(by(recommend.concept[,"概念"], recommend.concept$"代码", paste, collapse=",")[])
names(stock.concept.summary) <- "concept"
stock.concept.summary <- cbind("code"=row.names(stock.concept.summary), stock.concept.summary)
gc()
starttime <- Sys.time()
Sys.setenv(http_proxy="http://niyong:111111yN@isa06:8008/")
concept <- read.csv("concept.txt", header=T, colClasses=c("character","character"), col.names=c("name","code"))
####################################################################
getconceptstock <- function(concept, i) {
library(RCurl)
library(XML)
stock.list.concept  <- data.frame()
concept.url <- paste("http://quote.tool.hexun.com/hqzx/stocktype.aspx?columnid=5522&type_code=", concept[i,"code"], "&sorttype=3&updown=up&page=1&count=100", sep="")
html.page <- getURL(concept.url, .encoding="gb2312", .opts = list(debugfunction=d$update,verbose = TRUE))
html.page <- gsub("'","", html.page)
html.page.trim <- substr(html.page, 14,  as.numeric(gregexpr("\\]]", html.page)))
concept.stock.list <- strsplit(html.page.trim, "\\],\\[")
concept.stock.list[[1]][1] <- gsub("\\[", "" ,concept.stock.list[[1]][1])
concept.stock.list[[1]][length(concept.stock.list[[1]])] <- gsub("\\]", "" ,concept.stock.list[[1]][length(concept.stock.list[[1]])])
colnames <- c("代码","名称","最新价","涨跌幅","昨收","今开","最高","最低","成交量","成交额","换手","振幅","量比")
concept.stock.df <- read.table(text=concept.stock.list[[1]], colClasses=c("character"), sep=",", col.names=colnames, fill=T)
concept.stock.df <- cbind(concept.stock.df, "概念"=concept[i, "name"])
rbind(stock.list.concept, concept.stock.df)
}
################Parllel Running###########################
library(foreach)
library(doParallel)
n <- nrow(concept)
cl <- makeCluster(10)
registerDoParallel(cl)
stock.concept.list <- foreach(j=1:n, .combine="rbind", .errorhandling="remove") %dopar% getconceptstock(concept, j)
stopCluster(cl)
filename <- paste("conceptlist/conceptlist_", Sys.Date(), ".csv", sep="")
write.csv(result, filename, row.names=F, quote=F)
print(Sys.time()-starttime)
############################################################################
stock.concept.summary <- data.frame(by(recommend.concept[,"概念"], recommend.concept$"代码", paste, collapse=",")[])
names(stock.concept.summary) <- "concept"
stock.concept.summary <- cbind("code"=row.names(stock.concept.summary), stock.concept.summary)
stock.concept.summary <- data.frame(by(recommend.concept[,"概念"], recommend.concept$"代码", paste, collapse=",")[])
stock.concept.list
stock.concept.summary <- data.frame(by(stock.concept.list[,"概念"], stock.concept.list$"代码", paste, collapse=",")[])
stock.concept.summary
head(stock.concept.summary)
names(stock.concept.summary) <- "concept"
stock.concept.summary <- cbind("code"=row.names(stock.concept.summary), stock.concept.summary)
head(stock.concept.summary)
for (i in 1:nrow(recommend)) {
recommend[i, "concept"] <- stock.concept.summary["code"==recommed[i, "code"], concept]
}
stock.concept.summary["code"==recommed[i, "code"], concept]
stock.concept.summary["code"==recommed[i, "code"], "concept"]
stock.concept.summary["code"==recommend[i, "code"], "concept"]
for (i in 1:nrow(recommend)) {
recommend[i, "concept"] <- stock.concept.summary["code"==recommend[i, "code"], "concept"]
}
head(recommend)
for (i in 1:nrow(recommend)) {
print(stock.concept.summary["code"==recommend[i, "code"], "concept"])
}
for (i in 1:nrow(recommend)) {
print(stock.concept.summary["code"==recommend[i, "code"], "concept"])
}
stock.concept.summary
names(stock.concept.summary)
stock.concept.summary["code"==recommend[i, "code"], "concept"]
stock.concept.summary["code"==recommend[i, "code"], ]
stock.concept.summary["code", ]
names(stock.concept.summary)
stock.concept.summary$code
recommend[i, "code"]
recommend[1, "code"]
stock.concept.summary["code" %in% recommend[i, "code"], "concept"]
stock.concept.summary["code" %in% recommend[1, "code"], "concept"]
stock.concept.summary["code" = recommend[1, "code"], "concept"]
stock.concept.summary["code" == '002413', "concept"]
nrow(stock.concept.summary)
stock.concept.summary["code" == 002413, "concept"]
subset(stock.concept.summary, substr(stock.concept.summary$code,1,1)!=3)
subset(stock.concept.summary, substr(stock.concept.summary$code,1,1)!=3)
head(subset(stock.concept.summary, substr(stock.concept.summary$code,1,1)!=3))
stock.concept.summary <- subset(stock.concept.summary, substr(stock.concept.summary$code,1,1)!=3)
nrow(stock.concept.summary)
head(stock.concept.summary)
stock.concept.summary["code"==000006, "concept"])
stock.concept.summary["code"==000006, "concept"]
stock.concept.summary["code"=='000006', "concept"]
stock.concept.summary["code"=='000006',]
class(stock.concept.summary)
sr(stock.concept.summary)
str(stock.concept.summary)
stock.concept.summary <- data.frame("code"=row.names(stock.concept.summary), stock.concept.summary, stringsAsFactors=F)
str(stock.concept.summary)
stock.concept.summary <- data.frame(by(stock.concept.list[,"概念"], stock.concept.list$"代码", paste, collapse=",")[])
names(stock.concept.summary) <- "concept"
stock.concept.summary <- data.frame("code"=row.names(stock.concept.summary), stock.concept.summary, stringsAsFactors=F)
stock.concept.summary <- subset(stock.concept.summary, substr(stock.concept.summary$code,1,1)!=3)
for (i in 1:nrow(recommend)) {
print(stock.concept.summary["code" %in% recommend[i, "code"], "concept"])
}
stock.concept.summary
head(stock.concept.summary)
stock.concept.summary
str(stock.concept.summary)\
str(stock.concept.summary)
stock.concept.summary["code" == '900955', "concept"]
stock.concept.summary["code" == '000001', "concept"]
head(stock.concept.summary)
stock.concept.summary["code" == 000001, "concept"]
stock.concept.summary["code" == '000001', "concept"]
stock.concept.summary"code" == '000001', "concept"]
stock.concept.summary$code==
'000001'
any(stock.concept.summary$code=='000001')
head(stock.concept.summary$code=='000001')
stock.concept.summary[code=='000001']
stock.concept.summary['code'=='000001',]
stock.concept.summary["code"=='000001',]
stock.concept.summary[stock.concept.summary$code=='000001',]
for (i in 1:nrow(recommend)) {
print(stock.concept.summary[stock.concept.summary$code == recommend[i, "code"], "concept"])
}
for (i in 1:nrow(recommend)) {
recommend[i, "concept"] <- stock.concept.summary[stock.concept.summary$code == recommend[i, "code"], "concept"]
}
for (i in 1:nrow(recommend)) {
s <- stock.concept.summary[stock.concept.summary$code == recommend[i, "code"], "concept"]
recommend[i, "concept"] <- ifelse(s=="", "NA", s)
}
for (i in 1:nrow(recommend)) {
s <- stock.concept.summary[stock.concept.summary$code == recommend[i, "code"], "concept"]
recommend[i, "concept"] <- ifelse(s=="", "NA", s)
}
for (i in 1:nrow(recommend)) {
s <- stock.concept.summary[stock.concept.summary$code == recommend[i, "code"], "concept"]
recommend[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
recommend
recommend
recommend
rise.stock <- read.csv("rise.stock.txt", header=F, colClasses=c("character"), col.names=c("code"))
rise.stock <- read.csv("rise_stock.txt", header=F, colClasses=c("character"), col.names=c("code"))
rise.stock <- read.csv("rise_stock.txt", header=F, colClasses=c("character"), col.names=c("code"))
for (i in 1:nrow(recommend)) {
s <- stock.concept.summary[stock.concept.summary$code == rise.stock[i, "code"], "concept"]
rise.stock[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
rise.stock
for (i in 1:nrow(rise.stock)) {
s <- stock.concept.summary[stock.concept.summary$code == rise.stock[i, "code"], "concept"]
rise.stock[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
rise.stock
rise.stock <- read.csv("rise_stock.txt", header=F, colClasses=c("character"), col.names=c("code"))
for (i in 1:nrow(rise.stock)) {
s <- stock.concept.summary[stock.concept.summary$code == rise.stock[i, "code"], "concept"]
rise.stock[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
rise.stock <- read.csv("rise_stock.txt", header=F, colClasses=c("character"), col.names=c("code"))
for (i in 1:nrow(rise.stock)) {
s <- stock.concept.summary[stock.concept.summary$code == rise.stock[i, "code"], "concept"]
rise.stock[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
rise.stock
rise.stock
rise.stock <- read.csv("rise_stock.txt", header=T, colClasses=c("character","character"))
for (i in 1:nrow(rise.stock)) {
s <- stock.concept.summary[stock.concept.summary$code == rise.stock[i, "code"], "concept"]
rise.stock[i, "concept"] <- ifelse(length(s)==0, "NA", s)
}
rise.stock
rise.stock
table(rise.stock[,"concept"])
table(paste(rise.stock[,"concept"],collapse = ","))
table(paste(rise.stock[,"concept"], collapse = ","), sep=",")
letters[1:3]
paste(rise.stock[,"concept"], collapse = ",")
strsplit(paste(rise.stock[,"concept"], collapse = ","),",")
table(strsplit(paste(rise.stock[,"concept"], collapse = ","),","))
t(table(strsplit(paste(rise.stock[,"concept"], collapse = ","),",")))
t((strsplit(paste(rise.stock[,"concept"], collapse = ","),",")))
t(strsplit(paste(rise.stock[,"concept"], collapse = ","),",")))
t(strsplit(paste(rise.stock[,"concept"], collapse = ","),","))
strsplit(paste(rise.stock[,"concept"], collapse = ","),",")
recommend
rm(recommend.exclude.3)
rm(recommend.exclude.3x)
ls()
rm(txt2)
rm(x)
debugGatherer()$update
d$update
recommend
recommend
stocklist["code"=='002172',]
stocklist[stocklist$code=='002172',]
result[result$code=='002172',]
result[result$code=='002101',]
23.23-19.74
(23.23-19.74)/19.74
result[result$code=='002395',]
17.25-13.03
4.22/13.03
result[result$code=='600645',]
58.66-51.75
6.91/51.75
result[result$code=='600686',]
20-14.36
5.64/14.36
